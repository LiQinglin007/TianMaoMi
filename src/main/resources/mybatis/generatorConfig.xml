<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <classPathEntry location="D:\java\mysql-connector-java-5.1.24.jar"></classPathEntry>
    <context id="my" targetRuntime="MyBatis3">

        <commentGenerator>
            <property name="suppressAllComments" value="true"></property>
            <property name="suppressDate" value="true"></property>
            <property name="javaFileEncoding" value="utf-8"/>
        </commentGenerator>

        <jdbcConnection driverClass="${driverClass}"
                        connectionURL="${connectionURL}"
                        userId="${userId}"
                        password="${password}">
        </jdbcConnection>

        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <javaModelGenerator targetPackage="${beanPackage}" targetProject="${src_main_java}">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="true"></property>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="true"></property>
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器，
          注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
              或者只使用Mapper接口+Annotation，
              所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
          targetPackage/targetProject:同javaModelGenerator
       -->
        <sqlMapGenerator targetPackage="${sqlMapperPackage}" targetProject="${src_main_resources}">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"></property>
        </sqlMapGenerator>

        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
          targetPackage/targetProject:同javaModelGenerator
          type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
              1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
              2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
              3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
          注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
      -->
        <javaClientGenerator targetPackage="${daoPackage}" targetProject="${src_main_java}" type="XMLMAPPER">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>


        <!-- 配置表信息 -->
        <!-- schema即为数据库名
            tableName为对应的数据库表
            domainObjectName是要生成的实体类
            enable*ByExample是否生成 example类
        -->
        <!-- sql占位符，表示所有的表 -->
        <!--<table tableName="%">-->
        <!--<generatedKey column="epa_id" sqlStatement="Mysql" identity="true" />-->
        <!--</table>-->


        <table tableName="TAccountContent"
               domainObjectName="TAccountContent"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
        </table>

    </context>
</generatorConfiguration>